// TODO: figure out how to apply 
// variables with defaults: MUTATION_1,MUTATION_2,EPISTATIC_S,NEUTRAL_FREQ,SUBPOPULATION
// requires: MUTATION_1,MUTATION_2,EPISTATIC_S,NEUTRAL_FREQ,SUBPOPULATION
// Epistatic AND frequency dependent reproductive success rate function
mutationEffect($MUTATION_1$) {
	if (any(individual.genomes.countOfMutationsOfType($MUTATION_2$) > 0)){
		if (homozygous) {
			return 1 + mutFitnessRelative(mut, $NEUTRAL_FREQ$, $SUBPOPULATION$);
		} else {
			return 1 + (mutFitnessRelative(mut, $NEUTRAL_FREQ$, $SUBPOPULATION$) * mut.mutationType.dominanceCoeff);
		}
	} else {
		return $EPISTATIC_S$;
	}
}

// returns frequency-dependent fitness of mutation (using 'mut' as variable name conflicts with constant 'mut' as defined in mutationEffects etc.)
function(float)mutFitness(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation) {
    return 1 + mutFitnessRelative(m, neutral_freq, subpopulation);
}
function(float)mutFitnessRelative(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation) {
    return neutral_freq - sim.mutationFrequencies(subpopulation, m);
}
function(logical)hasNoMuts(object<Individual> indv,object<MutationType> muts){
	return(all(sapply(muts, "all(indv.genomes.countOfMutationsOfType(applyValue) == 0);")));
}
