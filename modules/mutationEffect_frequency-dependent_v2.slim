// variables with defaults: MUTATION_NAME,NEUTRAL_FREQ,SUBPOPULATION,KWARGS,MUTATION_FITNESS_FUNCTION
// requires: MUTATION_NAME,NEUTRAL_FREQ,SUBPOPULATION,KWARGS,MUTATION_FITNESS_FUNCTION
mutationEffect($MUTATION_NAME$) {
	if (homozygous) {
		return 1 + $MUTATION_FITNESS_FUNCTION$(mut, $NEUTRAL_FREQ$, $SUBPOPULATION$$KWARGS$);
	} else {
		return 1 + ($MUTATION_FITNESS_FUNCTION$(mut, $NEUTRAL_FREQ$, $SUBPOPULATION$$KWARGS$) * mut.mutationType.dominanceCoeff);
	}
}

// specific for genome-frequency (cf indv-frequency)
function(float)mutFreqDeficit(object<Mutation>m, float neutral_freq, object<Subpopulation> subpopulation) {
	return neutral_freq - sim.mutationFrequencies(subpopulation, m);
}

// returns frequency-dependent fitness of mutation (using 'mut' as variable name conflicts with constant 'mut' as defined in mutationEffects etc.)
function(float)mutRelativeFitnessLinear(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation, [numeric scale = 1]) {
    return scale * mutFreqDeficit(m, neutral_freq, subpopulation);
}
// in this function, if freq > neutral_freq, fitness decreases linearly; if freq < neutral_freq, fitness increases exponentially (or by some other function?) until it hits max_fitness when freq ~ 0)
function(float)mutRelativeFitnessLowerExpUpperLinear(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation, [numeric scale = 1], [numeric max_fitness = 1], [numeric power = 2]) {
	freq_deficit = mutFreqDeficit(m, neutral_freq, subpopulation);
	if (freq_deficit <= 0){
		return scale * freq_deficit;
	} else {
		// return $TRANSFORM_FUNCTION$(freq_deficit / neutral_freq) * max_fitness;
		return max_fitness * ( (freq_deficit / neutral_freq) ^ power );
	}
}
