// variables with defaults: MUTATION_NAME,NEUTRAL_FREQ,SUBPOPULATION,KWARGS,MUTATION_FITNESS_FUNCTION
// requires: MUTATION_NAME,NEUTRAL_FREQ,SUBPOPULATION,KWARGS,MUTATION_FITNESS_FUNCTION
1 early() {
	$SUBPOPULATION$.setValue("$MUTATION_NAME$_indv_frequency", NULL);
	$SUBPOPULATION$.setValue("$MUTATION_NAME$_indv_frequency_update_cycle", 0);
}

mutationEffect($MUTATION_NAME$) {
	if (homozygous) {
		return 1 + $MUTATION_FITNESS_FUNCTION$(mut, $NEUTRAL_FREQ$, $SUBPOPULATION$$KWARGS$);
	} else {
		return 1 + ($MUTATION_FITNESS_FUNCTION$(mut, $NEUTRAL_FREQ$, $SUBPOPULATION$$KWARGS$) * mut.mutationType.dominanceCoeff);
	}
}

// specific for indv-frequency
function(float)mutFreqDeficit(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation) {
    return neutral_freq - mutRelativeFrequencyByIndv(m, subpopulation);
}

// the following functions are shared with mutationEffect_frequency-dependent_v2.slim
// returns frequency-dependent fitness of mutation (using 'mut' as variable name conflicts with constant 'mut' as defined in mutationEffects etc.)
function(float)mutRelativeFitnessLinear(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation, [numeric scale = 1]) {
    return scale * mutFreqDeficit(m, neutral_freq, subpopulation);
}
// in this function, if freq > neutral_freq, fitness decreases linearly; if freq < neutral_freq, fitness increases exponentially (or by some other function?) until it hits max_fitness when freq ~ 0)
function(float)mutRelativeFitnessLowerExpUpperLinear(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation, [numeric scale = 1], [numeric max_fitness = 1], [numeric power = 2]) {
	freq_deficit = mutFreqDeficit(m, neutral_freq, subpopulation);
	if (freq_deficit <= 0){
		return scale * freq_deficit;
	} else {
		// return $TRANSFORM_FUNCTION$(freq_deficit / neutral_freq) * max_fitness;
		return max_fitness * ( (freq_deficit / neutral_freq) ^ power );
	}
}

// function that gets frequency of individuals with a given mutation
function(float)mutRelativeFrequencyByIndv(object<Mutation> m, object<Subpopulation> subpopulation){
	if (sim.cycle == subpopulation.getValue(paste0("m", m.mutationType.id, "_indv_frequency_update_cycle"))) {
		return subpopulation.getValue(paste0("m", m.mutationType.id, "_indv_frequency"));
	} else {
		freq = numIndvsWithMut(subpopulation.individuals, m.mutationType)/subpopulation.individualCount;
		subpopulation.setValue(paste0("m", m.mutationType.id, "_indv_frequency"), freq);
		subpopulation.setValue(paste0("m", m.mutationType.id, "_indv_frequency_update_cycle"), sim.cycle);
		return freq;
	}
}
// the following functions were copied from functions_mut_presence.slim
// returns True if any individuals in 'indv' has a given mutation type
function(logical)hasMut(object<Individual> indvs,object<MutationType> m) {
	return(sapply(indvs, "any(applyValue.genomes.countOfMutationsOfType(m) > 0);"));
}
// returns number of individuals with a given mutation type
function(integer)numIndvsWithMut(object<Individual> indvs,object<MutationType> m){
	return(sum(sapply(indvs, "hasMut(applyValue, m);")));
}
