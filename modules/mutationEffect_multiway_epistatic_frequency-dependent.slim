// variables with defaults: MUTATION_1,MUTATIONS,EPISTATIC_S,NEUTRAL_FREQ,SUBPOPULATION
// requires: MUTATION_1,MUTATIONS,EPISTATIC_S,NEUTRAL_FREQ,SUBPOPULATION
// Epistatic AND frequency dependent reproductive success rate function
mutationEffect($MUTATION_1$) {
	if (hasMuts(individual, $MUTATIONS$)){
		return $EPISTATIC_S$;
	} else {
		if (homozygous) {
			return 1 + mutFitnessRelative(mut, $NEUTRAL_FREQ$, $SUBPOPULATION$);
		} else {
			return 1 + (mutFitnessRelative(mut, $NEUTRAL_FREQ$, $SUBPOPULATION$) * mut.mutationType.dominanceCoeff);
		}
	}
}

// function shared with modifyChild_multiway_epistatic.slim
function(logical)hasMuts(object<Individual> indv,
                         object<MutationType> muts){
	return(all(sapply(muts, "any(indv.genomes.countOfMutationsOfType(applyValue) > 0);")));
}

// returns frequency-dependent fitness of mutation (using 'mut' as variable name conflicts with constant 'mut' as defined in mutationEffects etc.)
function(float)mutFitness(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation) {
    return 1 + mutFitnessRelative(m, neutral_freq, subpopulation);
}
function(float)mutFitnessRelative(object<Mutation> m, float neutral_freq, object<Subpopulation> subpopulation) {
    return neutral_freq - sim.mutationFrequencies(subpopulation, m);
}